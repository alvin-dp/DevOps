---

apiVersion: v1
kind: Namespace
metadata:
  name: jenkins

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: jenkins

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: jenkins
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    k8s-app: jenkins

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins-settings
  namespace: jenkins

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: jenkins
rules:
  
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["jenkins-settings"]
    verbs: ["get", "update"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: jenkins

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: jenkins
  template:
    metadata:
      labels:
        k8s-app: jenkins
    spec:
      containers:
        - name: jenkins
          image: alvindpdevops/devops_curse:latest
          imagePullPolicy: Always
          ports:
            - name: http-port
              containerPort: 8080
              protocol: TCP
            - name: jnlp-port
              containerPort: 50000              
          #args:
            #- --auto-generate-certificates
            #- --namespace=kubernetes-dashboard
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          # volumeMounts:
          #   - name: kubernetes-dashboard-certs
          #     mountPath: /certs
          #     # Create on-disk volume to store exec logs
          #   - mountPath: /tmp
          #     name: tmp-volume
          volumeMounts:
          - mountPath: /var/run/docker.sock
          #- mountPath: //./pipe/docker_engine
            name: docker-socket-volume           
          - mountPath: /var/jenkins_home
            name: jenkins-home                        
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 30
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            #runAsUser: 1001
            #runAsGroup: 2001
      volumes:
        # - name: kubernetes-dashboard-certs
        #   secret:
        #     secretName: kubernetes-dashboard-certs
        - name: docker-socket-volume
            hostPath:
              path: //./pipe/docker_engine
        - name: jenkins-home
            hostPath:
              path: D:/Docker/Vars/jenkins              
              type: Directory        
        # - name: tmp-volume
        #   emptyDir: {}
      serviceAccountName: jenkins
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule